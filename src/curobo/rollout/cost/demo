from typing import List, Optional, Union, Callable
import torch
from dataclasses import dataclass
from curobo.rollout.cost.cost_base import CostConfig

@dataclass
class JointBendingConfig(CostConfig):
    """
    Configuration for joint bending cost with exponential decay:
      selected_joints:   List of joint indices or names to apply bending incentive
      target_angles:     Desired joint angles in radians
      joint_weights:     Optional per-joint weighting factors
      k:                 Exponential rate: larger k → 更快达到饱和惩罚
    """
    selected_joints: List[Union[int, str]] = None
    target_angles:    List[float]           = None
    joint_weights:    Optional[List[float]] = None
    k:                float                 = 5.0  # 默认衰减速度

    def __post_init__(self):
        super().__post_init__()
        assert self.tensor_args is not None, "tensor_args must be provided"

        device = self.tensor_args.device
        dtype  = self.tensor_args.dtype

        # 转成 tensor，shape=[1,1,J]
        tgt = torch.tensor(self.target_angles, device=device, dtype=dtype)
        self.target_angles = tgt.view(1, 1, -1)

        # 可选的关节权重
        if self.joint_weights is not None:
            w = torch.tensor(self.joint_weights, device=device, dtype=dtype)
            self.joint_weights = w.view(1, 1, -1)

        # 指数衰减系数
        self.k = torch.tensor(self.k, device=device, dtype=dtype)

        # 全局权重
        if self.weight is None:
            self.weight = torch.tensor(1.0, device=device, dtype=dtype)
        else:
            self.weight = self.weight.to(device=device, dtype=dtype)

        # 长度检查
        num_j = self.target_angles.numel()
        assert len(self.selected_joints) == num_j, (
            f"selected_joints length ({len(self.selected_joints)}) must match"
            f" number of target_angles ({num_j})"
        )
        if self.joint_weights is not None:
            assert self.joint_weights.numel() == num_j, (
                f"joint_weights length ({self.joint_weights.numel()}) must match"
                f" number of selected_joints ({len(self.selected_joints)})"
            )


class JointBending:
    """
    用指数衰减的方式惩罚“未弯足够”的关节：
      penalty = weight * joint_weight * (1 - exp(-k * max(0, target - theta)))
    """
    def __init__(
        self,
        config: JointBendingConfig,
        joint_name_to_index_fn: Optional[Callable[[str], int]] = None
    ):
        self.tensor_args         = getattr(config, "tensor_args", None)
        self.weight              = config.weight           # scalar tensor
        self.target_angles       = config.target_angles    # [1,1,J]
        self.joint_weights       = config.joint_weights    # [1,1,J] or None
        self.k                   = config.k               # scalar tensor
        self.selected_joints     = config.selected_joints
        self.joint_index_to_name = None

        # 如果用名字索引，先映射
        if joint_name_to_index_fn and isinstance(self.selected_joints[0], str):
            mapped = []
            self.joint_index_to_name = {}
            for name in self.selected_joints:
                idx = joint_name_to_index_fn(name)
                mapped.append(idx)
                self.joint_index_to_name[idx] = name
            self.selected_joints = mapped

        # 缓存 index tensor
        self.selected_idx = torch.as_tensor(
            self.selected_joints,
            dtype=torch.long,
            device=self.tensor_args.device
        )  # [J]

    def forward(self, joint_state: torch.Tensor, debug: bool = False) -> torch.Tensor:
        """
        joint_state: [B, S, DOF]
        返回 final_cost: [B, S]
        """
        # 抽取我们关心的 J 个关节：[B, S, J]
        group = joint_state.index_select(dim=-1, index=self.selected_idx)

        # 1) 计算 under-bend 量：relu(target - θ)
        diff = torch.nn.functional.relu(self.target_angles - group)  # [B,S,J]

        # 2) 指数衰减惩罚：pen = (1 - exp(-k * diff)) * joint_weight
        w = self.joint_weights if self.joint_weights is not None else 1.0
        exp_term = torch.exp(-self.k * diff)                          # [B,S,J]
        pen = (1.0 - exp_term) * w                                    # [B,S,J]

        # 3) 求和并乘全局权重
        cost = pen.sum(dim=-1)              # [B,S]
        final_cost = cost * self.weight     # [B,S]

        if debug:
            sample = final_cost[0, :min(final_cost.size(1), 5)].tolist()
            print("=== [JointBending Debug] ===")
            print("Selected joint indices:", self.selected_idx.tolist())
            if self.joint_index_to_name:
                names = [self.joint_index_to_name[i] for i in self.selected_idx.tolist()]
                print("Joint names:", names)
            print("Current angles (batch0,seed0):", group[0,0,:].tolist())
            print("Target angles:", self.target_angles.flatten().tolist())
            print("k:", float(self.k))
            print("Sample cost:", sample)

        return final_cost
